name: Publish

on: [push, pull_request]

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: terminusdb/terminus_store_prolog
      RUST_BACKTRACE: 1
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build -t terminusdb/terminus_store_prolog:latest .

      - name: Run tests
        run: docker run -e RUST_BACKTRACE=$RUST_BACKTRACE --rm terminusdb/terminus_store_prolog:latest bash -c "./run_swipl -g run_tests -g halt"

      - name: Log into Docker Container Registry
        if: github.event_name != 'pull_request' && (contains(github.ref, 'tag') || contains(github.ref, 'master'))
        run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u terminusdb --password-stdin

      - name: Push to the Docker registry
        if: github.event_name != 'pull_request' && (contains(github.ref, 'tag') || contains(github.ref, 'master'))
        run: |
          IMAGE_ID=$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  docker_fedora:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: terminus_store_prolog_fedora
      RUST_BACKTRACE: 1
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile.fedora --tag $IMAGE_NAME

      - name: Run tests
        run: docker run -e RUST_BACKTRACE=$RUST_BACKTRACE --rm $IMAGE_NAME bash -c "./run_swipl -g run_tests -g halt"

      - name: Log into registry
        if: github.event_name != 'pull_request' && (contains(github.ref, 'tag') || contains(github.ref, 'master'))
        run: echo ${{ secrets.CR_PAT }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Push image
        if: github.event_name != 'pull_request' && (contains(github.ref, 'tag') || contains(github.ref, 'master'))
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  windows:
    runs-on: windows-latest
    env:
      RUSTFLAGS: -C target-feature=+crt-static
    steps:
      - uses: actions/checkout@v2
        # Runs a single command using the runners shell
      - name: rust-toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable-x86_64-pc-windows-gnu
          override: true

      - name: Install LLVM and SWI Prolog
        run: choco install llvm swi-prolog

      - name: Compile terminus-store-prolog
        shell: bash
        env:
          SWIPL: C:\Program Files\swipl\bin\swipl.exe
          LIBCLANG_PATH: C:\Program Files\LLVM\bin\
        run: |
          /c/Program\ Files/swipl/bin/swipl.exe -g 'use_module(library(prolog_pack)), prolog_pack:build_environment(Env), forall(member(E, Env), (writeq(E),nl)), halt'
          make windows_release


      - name: Upload Windows artifact DLL
        uses: actions/upload-artifact@v1
        with:
          name: libterminus_store.dll
          path: lib/x64-win64/libterminus_store.dll

  mac:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        # Runs a single command using the runners shell
      - name: rust-toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable

      - name: Install SWI Prolog
        run: bash .ci/install_swipl_dmg.sh

      - name: Compile terminus-store-prolog
        shell: bash
        env:
          SWIPL: /Applications/SWI-Prolog.app/Contents/MacOS/swipl
        run: |
          $SWIPL -g 'use_module(library(prolog_pack)), prolog_pack:build_environment(Env), forall(member(E, Env), (writeq(E),nl)), halt'
          SWIPL_PATH='/Applications/SWI-Prolog.app/Contents/MacOS/' ./make.sh

      - name: Upload macOS artifact dylib
        uses: actions/upload-artifact@v1
        with:
          name: libterminus_store.dylib
          path: lib/x86_64-darwin/libterminus_store.dylib

  pack:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && contains(github.ref, 'tag')
    steps:
      - name: Install SWI Prolog
        run: |
          sudo apt-add-repository ppa:swi-prolog/stable
          sudo apt update
          sudo apt install swi-prolog-nox
      - name: rust-toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
      - name: Install pack
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          swipl -g "pack_install('https://github.com/terminusdb/terminus_store_prolog/archive/$VERSION.zip', [interactive=false])." -g halt

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && contains(github.ref, 'tag')
    needs: [docker, windows, mac, pack]
    steps:
      - name: Set release name
        id: release_name
        run: |
            TAG=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            echo "::set-output name=tag::$TAG"

      - uses: actions/download-artifact@v2

      - name: Create a Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
            tag_name: ${{ steps.release_name.outputs.tag }}
            files: |
              libterminus_store.dylib/libterminus_store.dylib
              libterminus_store.dll/libterminus_store.dll
